#include <iostream>
#include <cmath>
//Zadanie pierwsze
// Klasa RobotStary
using namespace std;

class RobotStary {
public:
    virtual void idzDo(double x, double y) {
        cout << "RobotStary idzie do (" << x << ", " << y << ")\n";
    }
};

// Klasa RobotNowy
class RobotNowy {
public:
    void idzDo(double kat, double odleglosc) {
        cout << "RobotNowy idzie do (kąt: " << kat << "°, odległość: " << odleglosc << ")\n";
    }
};

// Adapter dla klasy RobotStary, który używa RobotNowy
class AdapterRobota : public RobotStary {
private:
    RobotNowy& nowyRobot; // Referencja do obiektu RobotNowy

public:
    AdapterRobota(RobotNowy& nowyRobot) : nowyRobot(nowyRobot) {}

    void idzDo(double x, double y) override {
        // Konwersja współrzędnych prostokątnych (x, y) na biegunowe
        double odleglosc = std::sqrt(x * x + y * y);
        double kat = std::atan2(y, x) * 180 / M_PI; // konwersja na stopnie
        
        // Przekazanie tych współrzędnych do nowego robota
        nowyRobot.idzDo(kat, odleglosc);
    }
};

int main() {
    RobotNowy nowyRobot;
    AdapterRobota adapter(nowyRobot);

    // Przykład użycia - przejście do punktu (3, 4) w układzie prostokątnym
    adapter.idzDo(3, 4);  // współrzędne biegunowe (53.13°, 5)

    return 0;
}
